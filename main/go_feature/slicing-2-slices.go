package main

import "fmt"

func main() {
	a := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
	s := a[0:]
	s = append(s, 11, 22, 33)
	sa := a[2:7]
	sb := sa[3:5]
	fmt.Println(a, len(a), cap(a))    //输出：[1 2 3 4 5 6 7 8 9 0] 10 10
	fmt.Println(s, len(s), cap(s))    //输出：[1 2 3 4 5 6 7 8 9 0 11 22 33] 13 20
	fmt.Println(sa, len(sa), cap(sa)) //输出：[3 4 5 6 7] 5 8
	fmt.Println(sb, len(sb), cap(sb)) //输出：[6 7] 2 5

	/**
	可以看出，数组的len和cap是永远相等的，并且是在定义的时候就已经指定的，不能改变。
	切片s引用这个数组的全部元素，初始长度和容量都为10，继续追加3个元素后，其长度变为13容量为20。
	切片sa截取下标2到7的数组片段，长度为5，容量为8，这个容量的改变规则为原容量值减掉起始下标，
	此时若追加元素，会覆盖掉原内存地址中存在的值。切片sb截取切片sa下标3到5的数组片段，
	注意，这里的下标指的是sa的下标，不是源数组的下标，长度为2，容量为8-3=5。
	*/
}
